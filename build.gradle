import java.nio.file.Files
import java.nio.file.Paths
import java.nio.file.StandardCopyOption

plugins {
    id 'java'
}

group 'net.net.forthecrown'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()

    maven { url 'https://papermc.io/repo/repository/maven-public/' }
    maven { url 'https://oss.sonatype.org/content/groups/public/' }
    maven { url "https://libraries.minecraft.net" }
    maven { url 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'}

    mavenLocal()
}

dependencies {
    implementation 'org.jetbrains:annotations:19.0.0'

    compileOnly "io.papermc.paper:paper-api:1.17-R0.1-SNAPSHOT"

    //implementation files("C:/Users/ander/Desktop/ThePitOfTrash/Paper/Paper-Server/target/paper-1.16.5.jar")
    compileOnly files("D:/GitHubRepos/Paper/Paper-Server/build/libs/Paper-Server-1.17-R0.1-SNAPSHOT-mojang-mapped.jar")
    implementation 'com.mojang:brigadier:1.0.17'
}

tasks.register('moveAll') {
    it.dependsOn(
            project("Plugin").getTasks().getByName("remap"),
            project("Grenadier").getTasks().getByName("remap")
    )

    it.doLast {
        moveToBuild("Standalone", true)
        moveToBuild("Standalone", false)
        moveToBuild("Plugin", false)

        cleanRemapFolder()
    }
}

void cleanRemapFolder() {
    File plLeftOver = new File(projectDir.absolutePath + '/remapping/Plugin-' + version + '-all.jar')
    println plLeftOver.absolutePath

    if(plLeftOver.exists()) plLeftOver.delete()
}

void moveToBuild(String filePrefix, boolean remapped) {
    String fileName = "Grenadier-" + filePrefix + '-' + version + (remapped ? "-remapped" : "") + '.jar'
    String dir = '/remapping/' + fileName

    String projDirPath = projectDir.absolutePath

    Files.move(
            Paths.get(projDirPath + dir),
            Paths.get(projDirPath + "/build/" + fileName),
            StandardCopyOption.REPLACE_EXISTING
    )
}